{"version":3,"file":"index.esm.js","sources":["../src/store/articoloSlice.js","../src/store/articlesBlogSlice.js","../src/store/snackbarSlice.js"],"sourcesContent":["import {createSlice, nanoid} from \"@reduxjs/toolkit\";\r\nimport {set} from \"lodash\";\r\n\r\n// Questo file definisce il slice \"articolo\" utilizzando Redux Toolkit per gestire lo stato di un articolo di blog\r\n// Lo stato include diverse proprietÃ  come la categoria selezionata, i paragrafi, il titolo, la descrizione SEO, immagini, e altro\r\n// Sono definiti anche diversi reducer per aggiornare lo stato, come l'aggiunta di paragrafi, la selezione di categorie, l'impostazione di immagini e altre azioni specifiche\r\n// Il file esporta le azioni, i selettori per accedere a parti specifiche dello stato e il reducer associato allo slice \"articolo\"\r\n\r\n\r\nconst initialArticoloState = {\r\n    categoria: \"\",\r\n    indice: [],\r\n    documentId: null,\r\n    titolo: \"\",\r\n    sottotitolo: \"\",\r\n    sintesi: \"\",\r\n    puntiChiave: \"\",\r\n    immagine: \"\",\r\n    paragrafi: [\r\n        {\r\n            id: nanoid(),\r\n            titoloParagrafo: \"\",\r\n            contenuto: \"\",\r\n            linkRiferimento: \"\",\r\n            immagine: \"\",\r\n            fileNameParagraph: \"\",\r\n            imagePreviewParagraph: null,\r\n        },\r\n    ],\r\n    faq: [\r\n        {\r\n            domanda: \"\",\r\n            risposta: \"\"\r\n        }\r\n    ],\r\n    dataArticolo: null,\r\n    parolaChiave: \"\",\r\n    titoloSeo: \"\",\r\n    slug: \"\",\r\n    slugUnico: true,\r\n    metaDescription: \"\",\r\n    newCategory: undefined,\r\n    newDescription: undefined,\r\n    fileName: \"\",\r\n    imagePreview: null,\r\n    normalizedSlug: \"\",\r\n    article: null,\r\n    loading: false,\r\n    category: [],\r\n    resetKey: 0,\r\n    punteggioSEO: \"\",\r\n    numeroParolePerParagrafo: {},\r\n    numeroParoleTotali: 0,\r\n    shouldSendToRedux: false,\r\n    validazione: {\r\n        linkInterniValido: false,\r\n        linkEsterniValido: false,\r\n    },\r\n};\r\n\r\n\r\nconst countWords = (text) => {\r\n    return text.trim().split(/\\s+/).length;\r\n};\r\n\r\n\r\n\r\n\r\nexport const articoloSlice = createSlice({\r\n    name: \"articolo\",\r\n    initialState: initialArticoloState,\r\n    reducers: {\r\n        updateParolaChiaveFromGemini: (state, action) => {\r\n            state.parolaChiave = action.payload;\r\n        },\r\n        updateTitoloSeoFromGemini: (state, action) => {\r\n            state.titoloSeo = action.payload;\r\n        },\r\n        updateSlugFromGemini: (state, action) => {\r\n            //state.slug = action.payload;\r\n            state.slug = action.payload.replace(/-/g, ' ');\r\n        },\r\n        updateMetaDescriptionFromGemini: (state, action) => {\r\n            state.metaDescription = action.payload;\r\n        },\r\n        updateTitleFromGemini: (state, action) => {\r\n            //state.titolo = action.payload;\r\n            const normalized = action.payload.trim().toLowerCase();\r\n            state.titolo = normalized.charAt(0).toUpperCase() + normalized.slice(1);\r\n        },\r\n        updateSubtitleFromGemini: (state, action) => {\r\n            //state.sottotitolo = action.payload;\r\n            const normalized = action.payload.trim().toLowerCase();\r\n            state.sottotitolo = normalized.charAt(0).toUpperCase() + normalized.slice(1);\r\n        },\r\n        updateFaqFromGemini: (state, action) => {\r\n            state.faq = action.payload.map(faqItem => ({\r\n                domanda: faqItem.domanda.trim(),\r\n                risposta: faqItem.risposta.trim(),\r\n            }));\r\n        },\r\n        updateSintesiFromGemini: (state, action) => {\r\n            // 1. Normalizza il testo: trimma gli spazi e metti tutto in minuscolo\r\n            const normalized = action.payload.trim().toLowerCase();\r\n\r\n            // 2. Metti in maiuscolo il primo carattere della stringa\r\n            let result = normalized.charAt(0).toUpperCase() + normalized.slice(1);\r\n\r\n            // 3. Cerca tutti i punti seguiti da uno spazio e una lettera minuscola\r\n            result = result.replace(/\\.\\s([a-z])/g, (match, p1) => {\r\n                // Sostituisci la lettera minuscola con la sua versione maiuscola\r\n                return '. ' + p1.toUpperCase();\r\n            });\r\n\r\n            state.sintesi = result;\r\n        },\r\n        updatePuntiChiaveFromGemini: (state, action) => {\r\n            //const normalized = action.payload.trim().toLowerCase();\r\n            //state.puntiChiave = normalized.charAt(0).toUpperCase() + normalized.slice(1);\r\n            state.puntiChiave = action.payload;\r\n        },\r\n        updateTitleParagraph: (state, action) => {\r\n            const { index, newTitle } = action.payload;\r\n            if (index >= 0 && index < state.paragrafi.length) {\r\n                const normalized = newTitle.trim().toLowerCase();\r\n                state.paragrafi[index].titoloParagrafo = normalized.charAt(0).toUpperCase() + normalized.slice(1);\r\n                //state.paragrafi[index].titoloParagrafo = newTitle.toLowerCase();\r\n            } else {\r\n                //console.error('Indice fuori range durante l\\'aggiornamento del titolo del paragrafo.');\r\n            }\r\n        },\r\n        updateContentParagraph: (state, action) => {\r\n            const { index, newParagraph } = action.payload;\r\n            if (index >= 0 && index < state.paragrafi.length) {\r\n                state.paragrafi[index].contenuto = newParagraph; // Correzione: aggiorna 'contenuto'\r\n            } else {\r\n                //console.error('Indice fuori range durante l\\'aggiornamento del contenuto del paragrafo.');\r\n            }\r\n        },\r\n        updateLinkRiferimento: (state, action) => {\r\n            const { index, newLink } = action.payload;\r\n            if (index >= 0 && index < state.paragrafi.length) {\r\n                state.paragrafi[index].linkRiferimento = newLink;\r\n            } else {\r\n                //console.error('Indice fuori range durante l\\'aggiornamento del contenuto del paragrafo.');\r\n            }\r\n        },\r\n        updateIndiceFromGemini: (state) => {\r\n            // Ricostruisce l'indice leggendo i titoli dei paragrafi dallo stato\r\n            state.indice = state.paragrafi.map((p, idx) =>\r\n                `${idx + 1}. ${p.titoloParagrafo}`\r\n            );\r\n        },\r\n        setInput: (state, action) => {\r\n            const { field, value } = action.payload;\r\n            return {\r\n                ...state,\r\n                [field]: value,\r\n            };\r\n        },\r\n        triggerSendToRedux: (state, action) => {\r\n            state.shouldSendToRedux = action.payload;\r\n        },\r\n       // setInputPath: (state, action) => {\r\n           // const { path, value } = action.payload;\r\n            //console.log('Path:', path);\r\n            //console.log('Value:', value);\r\n            //console.log('setInputPath payload', action.payload);\r\n            //set(state, path, value);\r\n            //console.log('Updated state', state);\r\n        //},\r\n        setInputPath: (state, action) => {\r\n            const { path, value } = action.payload;\r\n            const keys = path.replace(/\\[(\\d+)\\]/g, '.$1').split('.');\r\n            let current = state;\r\n\r\n            for (let i = 0; i < keys.length - 1; i++) {\r\n                const key = keys[i];\r\n                const nextKey = keys[i + 1];\r\n\r\n                // Crea strutture intermedie se mancano\r\n                if (!(key in current)) {\r\n                    current[key] = isNaN(Number(nextKey)) ? {} : [];\r\n                }\r\n\r\n                current = current[key];\r\n            }\r\n\r\n            const lastKey = keys[keys.length - 1];\r\n\r\n            // Se siamo in un array, assicurati che la chiave sia numerica\r\n            if (Array.isArray(current) && isNaN(Number(lastKey))) {\r\n                throw new Error(\r\n                    `[setInputPath] Tentativo di assegnare chiave non numerica '${lastKey}' a un array`\r\n                );\r\n            }\r\n\r\n            current[lastKey] = value;\r\n        },\r\n\r\n        setSelectedCategory: (state, action) => {\r\n            state.categoria = action.payload;\r\n        },\r\n        setCategory(state, action) {\r\n            state.category = action.payload;\r\n        },\r\n        // Azione per impostare il nome del file\r\n        setFileName: (state, action) => {\r\n            state.fileName = action.payload;\r\n        },\r\n        // Azione per mostrare l'immagine di anteprima\r\n        setImagePreview: (state, action) => {\r\n            state.imagePreview = action.payload;\r\n        },\r\n        // Funzione per ripulire il campo immagine di copertina\r\n        resetImagePreview: (state) => {\r\n            state.imagePreview = null;\r\n        },\r\n        setFileNameImageParagraph: (state, action) => {\r\n            const {index, value} = action.payload;\r\n            if (index >= 0 && index < state.paragrafi.length) {\r\n                state.paragrafi[index].fileNameParagraph = value;\r\n            } else {\r\n                //console.error('Index out of range when setting fileNameParagraph');\r\n            }\r\n        },\r\n        setImagePreviewParagraph: (state, action) => {\r\n            const { index, value } = action.payload;\r\n            if (index >= 0 && index < state.paragrafi.length) {\r\n                state.paragrafi[index].imagePreviewParagraph = value;\r\n            } else {\r\n                //console.error('Index out of range when setting image preview for paragraph');\r\n            }\r\n        },\r\n        resetImagePreviewParagraph: (state, action) => {\r\n            const index = action.payload;\r\n            state.paragrafi[index].imagePreviewParagraph = null;\r\n        },\r\n        resetImageInParagraph: (state, action) => {\r\n            const index = action.payload;\r\n            state.paragrafi[index].immagine = initialArticoloState.immagine;\r\n        },\r\n        // Azione per gestire l'id del documento generato da Firestore\r\n        setDocumentId: (state, action) => {\r\n            state.documentId = action.payload;\r\n        },\r\n        resetAll: (state) => {\r\n            state.indice = [];\r\n            state.parolaChiave = \"\";\r\n            state.titoloSeo = \"\";\r\n            state.slug = \"\";\r\n            state.metaDescription = \"\";\r\n            state.titolo = \"\";\r\n            state.sottotitolo = \"\";\r\n            state.numeroParolePerParagrafo = {};\r\n            state.newCategory = undefined;\r\n            state.newDescription = undefined;\r\n            state.fileName = \"\";\r\n            state.imagePreview = null;\r\n            state.categoria = \"\";\r\n            state.sintesi = \"\";\r\n            state.puntiChiave = \"\";\r\n        },\r\n        deleteAllParagraphs: (state) => {\r\n            state.paragrafi = [];\r\n        },\r\n        addParagraph: (state) => {\r\n            const newParagraph = {\r\n                id: nanoid(),\r\n                titoloParagrafo: \"\",\r\n                contenuto: \"\",\r\n                immagine: \"\",\r\n                fileNameParagraph: \"\",\r\n                imagePreviewParagraph: null,\r\n            };\r\n            state.paragrafi.push(newParagraph);\r\n        },\r\n        // Aggiorna l'indice con il titolo del paragrafo\r\n        updateIndice: (state, action) => {\r\n            const { titoloParagrafo, indiceParagrafo } = action.payload;\r\n            // Aggiorna l'indice corrispondente al paragrafo attuale con il nuovo titolo del paragrafo\r\n            state.indice[indiceParagrafo] = `${indiceParagrafo + 1}. ${titoloParagrafo}`;\r\n        },\r\n        deleteParagraph: (state, action) => {\r\n            const index = action.payload;\r\n\r\n            // Rimuovi il paragrafo dall'array\r\n            state.paragrafi.splice(index, 1);\r\n\r\n            // Rimuovi il titolo dall'indice\r\n            state.indice.splice(index, 1);\r\n\r\n            // Aggiorna la numerazione dell'indice dopo l'eliminazione\r\n            state.indice = state.indice.map((titolo, idx) => {\r\n                return `${idx + 1}. ${state.paragrafi[idx]?.titoloParagrafo || ''}`;\r\n            });\r\n        },\r\n        // Azione per creare la nuova categoria nel blog\r\n        setSelectedNewCategory: (state, action) => {\r\n            state.newCategory = action.payload;\r\n        },\r\n        // Azione per resettare il campo newCategory\r\n        resetNewCategory: (state,) => {\r\n            state.newCategory = undefined;\r\n        },\r\n        resetNewDescription: (state,) => {\r\n            state.newDescription = undefined;\r\n        },\r\n        // Azione per impostare la data e l'ora corrente\r\n        setArticleDate: (state, action) => {\r\n            state.dataArticolo = action.payload;\r\n        },\r\n        // Funzione per ripulire il campo immagine di copertina\r\n        resetImage: (state) => {\r\n            state.immagine = initialArticoloState.immagine;\r\n        },\r\n        resetFileName:(state) => {\r\n            state.fileName = \"\";\r\n        },\r\n        setLoading: (state, action) => {\r\n            state.loading = action.payload;\r\n        },\r\n        validaParolaChiave: (state) => {\r\n            // Imposta parolaChiaveValida a true se la parola chiave non Ã¨ vuota e contiene caratteri significativi\r\n            state.validazione.parolaChiaveValida = !!state.parolaChiave?.trim();\r\n        },\r\n        // Validazione titolo SEO\r\n        validaTitoloSeo: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase() || \"\";\r\n            const titoloSeo = state.titoloSeo?.trim().toLowerCase() || \"\";\r\n            // Controlla se il titolo inizia esattamente con la parola chiave\r\n            state.validazione.titoloSeoValido = parolaChiave && titoloSeo.startsWith(parolaChiave);\r\n        },\r\n        // Validazione meta description\r\n        validaMetaDescription: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase() || \"\";\r\n            state.validazione.metaDescriptionValida =\r\n                state.metaDescription &&\r\n                state.metaDescription.toLowerCase().includes(parolaChiave) &&\r\n                state.metaDescription.length >= 120 &&\r\n                state.metaDescription.length <= 155;\r\n        },\r\n        verificaUnicitaSlug: (state, action) => {\r\n            state.slugUnico = action.payload;\r\n        },\r\n        validaSlug: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase();\r\n            const slug = state.slug?.trim().toLowerCase();\r\n            const slugUnico = state.slugUnico;\r\n\r\n            // Verifica che lo slug contenga la parola chiave e che sia breve (max 50 caratteri)\r\n            state.validazione.slugValido = parolaChiave && slug.includes(parolaChiave) && slug.length <= 50 && slugUnico;\r\n        },\r\n        validaTitolo: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase();\r\n            const titolo = state.titolo?.trim().toLowerCase();\r\n\r\n            // Verifica che il titolo contenga la parola chiave\r\n            state.validazione.titoloValido = parolaChiave && titolo.includes(parolaChiave);\r\n        },\r\n        validaSottotitolo: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase();\r\n            const sottotitolo = state.sottotitolo?.trim().toLowerCase();\r\n\r\n            // Verifica che il titolo contenga la parola chiave\r\n            state.validazione.sottotitoloValido = parolaChiave && sottotitolo.includes(parolaChiave);\r\n        },\r\n        validaTitoliParagrafi: (state) => {\r\n            const parolaChiave = state.parolaChiave?.trim().toLowerCase();\r\n           // console.log(\"Parola chiave:\", parolaChiave);\r\n\r\n            // Filtra i titoli paragrafi per escludere quelli vuoti\r\n            const titoliParagrafi = state.paragrafi\r\n                .map(paragrafo => paragrafo.titoloParagrafo?.trim().toLowerCase())\r\n                .filter(titolo => titolo !== \"\");\r\n            //console.log(\"Titoli non vuoti:\", titoliParagrafi);\r\n\r\n            // Calcola il numero totale di titoli non vuoti\r\n            const totaleTitoli = titoliParagrafi.length;\r\n            //console.log(\"Totale titoli non vuoti:\", totaleTitoli);\r\n\r\n            // Se non ci sono titoli non vuoti, la validazione Ã¨ falsa\r\n            if (totaleTitoli === 0 || !parolaChiave) {\r\n                state.validazione.titoliParagrafiValidi = false;\r\n                //console.log(\"Validazione fallita: nessun titolo valido o parola chiave mancante.\");\r\n                return;\r\n            }\r\n\r\n            // Calcola i titoli contenenti la parola chiave\r\n            const titoliConParolaChiave = titoliParagrafi.filter(titolo => titolo.includes(parolaChiave));\r\n            //console.log(\"Titoli contenenti la parola chiave:\", titoliConParolaChiave);\r\n\r\n            // Calcola il numero minimo di titoli richiesti\r\n            const minimoTitoliConParolaChiave = Math.ceil(totaleTitoli / 2);\r\n            //console.log(\"Minimo richiesto per validazione:\", minimoTitoliConParolaChiave);\r\n\r\n            // Verifica se la condizione Ã¨ rispettata\r\n            const isValid = titoliConParolaChiave.length >= minimoTitoliConParolaChiave;\r\n            state.validazione.titoliParagrafiValidi = isValid;\r\n        },\r\n        setContaParole: (state, action) => {\r\n            const { index, wordCount } = action.payload;\r\n            state.numeroParolePerParagrafo[index] = wordCount;\r\n        },\r\n        setContaParoleTotale: (state) => {\r\n            let totaleParole = 0;\r\n\r\n            // Conta parole nel titolo, solo se non Ã¨ vuoto\r\n            if (state.titolo && state.titolo.trim() !== \"\") {\r\n                totaleParole += countWords(state.titolo);\r\n            }\r\n            // Conta parole nel sottotitolo, solo se non Ã¨ vuoto\r\n            if (state.sottotitolo && state.sottotitolo.trim() !== \"\") {\r\n                totaleParole += countWords(state.sottotitolo);\r\n            }\r\n            // Itera sui paragrafi per sommare il numero di parole nei titoli\r\n            if (state.paragrafi && Array.isArray(state.paragrafi)) {\r\n                state.paragrafi.forEach((paragrafo, index) => {\r\n                    if (paragrafo.titoloParagrafo && paragrafo.titoloParagrafo.trim() !== \"\") {\r\n                        totaleParole += countWords(paragrafo.titoloParagrafo);\r\n                    }\r\n                });\r\n            }\r\n            if (state.numeroParolePerParagrafo) {\r\n                totaleParole += Object.values(state.numeroParolePerParagrafo).reduce((acc, val) => acc + val, 0);\r\n            }\r\n            // Aggiorna il totale delle parole nel state\r\n            state.numeroParoleTotali = totaleParole;\r\n            // Validazione dell'articolo\r\n            state.validazione.lunghezzaArticoloValida = totaleParole >= 1000;\r\n        },\r\n        updateParolePerParagrafo: (state, action) => {\r\n            const { index } = action.payload;\r\n            const parolePerParagrafo = { ...state.numeroParolePerParagrafo };\r\n\r\n            // Rimuovi il paragrafo specificato\r\n            delete parolePerParagrafo[index];\r\n\r\n            // Ricostruisci l'oggetto mantenendo la sequenza degli indici\r\n            const numeroParolePerParagrafo = {};\r\n            let newIndex = 0;\r\n\r\n            Object.keys(parolePerParagrafo)\r\n                .sort((a, b) => parseInt(a) - parseInt(b)) // Ordina le chiavi numeriche\r\n                .forEach((key) => {\r\n                    // Assegna i nuovi indici sequenziali\r\n                    numeroParolePerParagrafo[newIndex] = parolePerParagrafo[key];\r\n                    newIndex++;\r\n                });\r\n\r\n            // Aggiorna lo stato con l'oggetto riformattato\r\n            return {\r\n                ...state,\r\n                numeroParolePerParagrafo: numeroParolePerParagrafo,\r\n            };\r\n        },\r\n        removeAllNumeroParolePerParagrafo: (state) => {\r\n            state.numeroParolePerParagrafo = {};\r\n        },\r\n        validaLinkInterni(state) {\r\n            const linkInterniRegex = /https:\\/\\/www\\.oscarprata\\.com(\\/(valutazioniNeuropsicologiche|riabilitazioneCognitiva|periziaClinicoLegale|consulenzaPsicologica|psicodiagnosi|prenota|chisono|blog|contatti|faq)?)?/i\r\n\r\n            state.validazione.linkInterniValido = state.paragrafi.some((paragrafo) => {\r\n                // Estrae i link dal contenuto HTML del paragrafo\r\n                const linkRegex = /<a\\s+href=\"([^\"]+)\"/g;\r\n                let match;\r\n                let linkTrovato = false;\r\n\r\n                while ((match = linkRegex.exec(paragrafo.contenuto)) !== null) {\r\n                    const link = match[1];\r\n                    //console.log(\"Link estratto:\", link);\r\n                    if (linkInterniRegex.test(link)) {\r\n                        //console.log(\"Link interno valido:\", link);\r\n                        linkTrovato = true;\r\n                        break;\r\n                    }\r\n                }\r\n                //console.log(\"Contenuto paragrafo:\", paragrafo.contenuto);\r\n                //console.log(\"Link interno trovato:\", linkTrovato);\r\n                return linkTrovato;\r\n            });\r\n            //console.log(\"Link interni valido:\", state.validazione.linkInterniValido);\r\n        },\r\n        validaLinkEsterni(state) {\r\n            // Regex per identificare link esterni (escludendo domini interni)\r\n            const linkEsterniRegex = /^(https?:\\/\\/(?!www\\.oscarprata\\.com|localhost(:\\d+)?)([^\\s\\/$.?#].\\S*))$/i;\r\n\r\n            state.validazione.linkEsterniValido = state.paragrafi.some((paragrafo) => {\r\n                // Estrae i link dal contenuto HTML del paragrafo\r\n                const linkRegex = /<a\\s+href=\"([^\"]+)\"/g;\r\n                let match;\r\n                let linkTrovato = false;\r\n\r\n                while ((match = linkRegex.exec(paragrafo.contenuto)) !== null) {\r\n                    const link = match[1];\r\n                    //console.log(\"Link estratto:\", link);\r\n                    // Verifica se il link Ã¨ un link esterno valido\r\n                    if (linkEsterniRegex.test(link)) {\r\n                        linkTrovato = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //console.log(\"Contenuto paragrafo:\", paragrafo.contenuto);\r\n                //console.log(\"Link esterno trovato:\", linkTrovato);\r\n                return linkTrovato;\r\n            });\r\n\r\n            //console.log(\"Link esterni valido:\", state.validazione.linkEsterniValido);\r\n        },\r\n        setPunteggioSEO: (state, action) => {\r\n            state.punteggioSEO = action.payload;\r\n        },\r\n\r\n\r\n\r\n        // Validazione completa\r\n        validaTutto: (state) => {\r\n            articoloSlice.caseReducers.validaParolaChiave(state);\r\n            articoloSlice.caseReducers.validaTitoloSeo(state);\r\n            articoloSlice.caseReducers.validaMetaDescription(state);\r\n            articoloSlice.caseReducers.validaSlug(state);\r\n            articoloSlice.caseReducers.validaTitolo(state);\r\n            articoloSlice.caseReducers.validaSottotitolo(state);\r\n            articoloSlice.caseReducers.validaTitoliParagrafi(state);\r\n            articoloSlice.caseReducers.validaLinkInterni(state);\r\n            articoloSlice.caseReducers.validaLinkEsterni(state);\r\n        },\r\n    },\r\n});\r\n\r\n// Estrai le azioni create\r\nexport const {\r\n    updateIndiceFromGemini,\r\n    updateSintesiFromGemini,\r\n    updatePuntiChiaveFromGemini,\r\n    updateContentParagraph,\r\n    updateTitleParagraph,\r\n    updateMetaDescriptionFromGemini,\r\n    updateParolaChiaveFromGemini,\r\n    updateLinkRiferimento,\r\n    updateSlugFromGemini,\r\n    updateTitoloSeoFromGemini,\r\n    updateTitleFromGemini,\r\n    updateSubtitleFromGemini,\r\n    updateFaqFromGemini,\r\n    deleteAllParagraphs,\r\n    setInput,\r\n    setInputPath,\r\n    setSelectedCategory,\r\n    resetNewDescription,\r\n    setDocumentId,\r\n    resetImage,\r\n    addParagraph,\r\n    updateIndice,\r\n    deleteParagraph,\r\n    setSelectedNewCategory,\r\n    resetNewCategory,\r\n    setArticleDate,\r\n    setFileName,\r\n    setImagePreview,\r\n    resetImagePreview,\r\n    setFileNameImageParagraph,\r\n    setImagePreviewParagraph,\r\n    resetImagePreviewParagraph,\r\n    resetImageInParagraph,\r\n    resetFileName,\r\n    resetAll,\r\n    setLoading,\r\n    setCategory,\r\n    triggerSendToRedux,\r\n    validaTutto,\r\n    setContaParole,\r\n    setContaParoleTotale,\r\n    updateParolePerParagrafo,\r\n    verificaUnicitaSlug,\r\n    setPunteggioSEO,\r\n} = articoloSlice.actions;\r\n\r\n// Seleziona parti dello stato\r\nexport const selectInitialStateArticolo = (state) => state.articolo; // Esporta l'intero initialArticleState\r\nexport const selectNewCategory = (state) => state.articolo.newCategory;\r\nexport const selectNewDescriptionOfCategory = (state) => state.articolo.newDescription;\r\nexport const selectDocumentId = (state) => state.articolo.documentId;\r\nexport const selectImagePreview = (state) => state.articolo.imagePreview;\r\nexport const selectImagePreviewParagraph = (index) => (state) => state.articolo.paragrafi[index]?.imagePreviewParagraph;\r\nexport const selectLoading = (state) => state.articolo.loading;\r\nexport const selectCategories = (state) => state.articolo.category;\r\nexport const selectSelectedCategory = (state) => state.articolo.categoria;\r\nexport const selectFaq = (state) => state.articolo.faq;\r\n// Esporto tutte le validazioni\r\nexport const selectValidazione = (state) => state.articolo.validazione;\r\n\r\n\r\n\r\nexport { initialArticoloState }; // Esporta l'oggetto di stato iniziale\r\nexport default articoloSlice.reducer;\r\n\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// Questo slice mantiene i dati degli articoli che vengono mostrati nel Blog\r\nexport const articlesBlogSlice = createSlice({\r\n    name: 'articles',\r\n    initialState: {\r\n        articles: [],\r\n        articlesByCategory: [],\r\n        selectedCategory: null,\r\n        category: [], // Ci sono tutte le categorie\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        // Sovrascrive completamente l'array di articoli\r\n        setArticles(state, action) {\r\n            state.articles = action.payload;\r\n        },\r\n        setArticlesByCategory(state, action) {\r\n            state.articlesByCategory = action.payload;\r\n        },\r\n        //setLoading(state, action) {\r\n           //state.loading = action.payload;\r\n        //},\r\n        //setSelectedCategory(state, action) {\r\n            //state.selectedCategory = action.payload;\r\n        //},\r\n        // Resetta la categoria selezionata\r\n        resetSelectedCategory(state) {\r\n            state.selectedCategory = null;\r\n        },\r\n        // Popola la pagina Blog con tutte le categorie\r\n        setCategoryPageBlog(state, action) {\r\n            state.category = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    setArticles,\r\n    //setSelectedCategory,\r\n    setArticlesByCategory,\r\n    setCategoryPageBlog,\r\n    resetSelectedCategory,\r\n    //setLoading,\r\n} = articlesBlogSlice.actions;\r\n\r\nexport const selectArticles = (state) => state.articles.articles;\r\nexport const selectArticlesByCategory = (state) => state.articles.articlesByCategory;\r\n//export const selectSelectedCategory = (state) => state.articles.selectedCategory;\r\nexport const selectCategoryPageBlog = (state) => state.articles.category;\r\n//export const selectLoading = (state) => state.articles.loading;\r\n\r\n\r\nexport default articlesBlogSlice.reducer;\r\n\r\n\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialSnackbarState = {\r\n    open: false,\r\n    message: \"\",\r\n    type: \"success\", // success, error, warning, info\r\n};\r\n\r\nexport const snackbarSlice = createSlice({\r\n    name: \"snackbar\",\r\n    initialState: initialSnackbarState,\r\n    reducers: {\r\n        showSnackbar: (state, action) => {\r\n            const { message, type } = action.payload;\r\n            state.open = true;\r\n            state.message = message;\r\n            state.type = type;\r\n        },\r\n        hideSnackbar: (state) => {\r\n            state.open = false;\r\n            state.message = \"\";\r\n            state.type = \"success\";\r\n        },\r\n    },\r\n});\r\n\r\n// Estrai le azioni e il reducer\r\nexport const {\r\n    showSnackbar,\r\n    hideSnackbar\r\n}\r\n= snackbarSlice.actions;\r\n\r\n\r\nexport default snackbarSlice.reducer;\r\n"],"names":[],"mappings":"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"}